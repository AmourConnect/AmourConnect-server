name: NodeJS, .NET Core Audit and Docker Push Image

on:
  push:
    branches:
      - main
      - test_before_prod
  pull_request:
    branches:
      - main

jobs:

  audit-lib:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout librairies
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies and run audit in Web Site folder
      run: |
        cd web_site
        npm install
        npm audit
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    - name: Restore dependencies and run audit in Api Server folder
      run: |
        cd server_api
        dotnet restore
        dotnet list package --vulnerable

  docker-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Docker setup
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: amourconnect
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Create .env file
        run: |
          echo 'PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}' > server_api/DataBase/.env
          echo 'PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}' >> server_api/DataBase/.env
          echo 'DB_USER=${DB_USER}' >> server_api/DataBase/.env
          echo 'DB_PASSWORD=${DB_PASSWORD}' >> server_api/DataBase/.env
          echo 'DB_DATABASE=${DB_DATABASE}' >> server_api/DataBase/.env
          echo 'EMAIL_USER=${EMAIL_USER}' > server_api/.env
          echo 'EMAIL_MDP=${EMAIL_MDP}' >> server_api/.env
          echo 'SERVICE=${SERVICE}' >> server_api/.env
          echo 'PORT_SMTP=${PORT_SMTP}' >> server_api/.env
          echo 'ClientId=${ClientId}' >> server_api/.env
          echo 'ClientSecret=${ClientSecret}' >> server_api/.env
          echo 'IP_NOW_FRONTEND=${IP_NOW_FRONTEND}' >> server_api/.env
          echo 'IP_NOW_BACKENDAPI=${IP_NOW_BACKENDAPI}' >> server_api/.env
          echo 'SecretKeyJWT=${SecretKeyJWT}' >> server_api/.env
          echo 'ConnectionDB=${ConnectionDB}' >> server_api/.env
          echo 'IP_NOW_FRONTEND=${IP_NOW_FRONTEND}' > web_site/.env
          echo 'NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}' >> web_site/.env
          echo 'NEXT_PUBLIC_PORT=${NEXT_PUBLIC_PORT}' >> web_site/.env

      - name: Build image Database
        run: |
          cd server_api/DataBase
          docker-compose -f compose.yaml up -d
      
      - name: Build image Server Api and Push
        run: |
           cd server_api/
           docker-compose -f compose.yaml up -d
           CONTAINER_ID=$(docker ps -q --filter "name=apinetcore")
           IMAGE_NAME_REPOSITORY=amourconnect/test_prod_amourconnect
           docker container commit $CONTAINER_ID $IMAGE_NAME_REPOSITORY
           docker tag $IMAGE_NAME_REPOSITORY $IMAGE_NAME_REPOSITORY:ApiAmourConnect
           docker push $IMAGE_NAME_REPOSITORY:ApiAmourConnect

      - name: Build image Web Site and Push
        run: |
           cd web_site/
           docker-compose -f compose.yaml up -d
           CONTAINER_ID=$(docker ps -q --filter "name=frontend-amourconnect")
           IMAGE_NAME_REPOSITORY=amourconnect/test_prod_amourconnect
           docker container commit $CONTAINER_ID $IMAGE_NAME_REPOSITORY
           docker tag $IMAGE_NAME_REPOSITORY $IMAGE_NAME_REPOSITORY:FrontAmourConnect
           docker push $IMAGE_NAME_REPOSITORY:FrontAmourConnect